{
  "name": "architect",
  "description": "A Simple yet powerful plugin system for node applications",
  "version": "0.1.11",
  "author": {
    "name": "ajax.org B.V.",
    "email": "info@ajax.org"
  },
  "contributors": [
    {
      "name": "Tim Caswell",
      "email": "tim@c9.io"
    },
    {
      "name": "Fabian Jakobs",
      "email": "fabian@c9.io"
    },
    {
      "name": "Christoph Dorn",
      "email": "christoph@christophdorn.com"
    }
  ],
  "main": "architect.js",
  "repository": {
    "type": "git",
    "url": "http://github.com/c9/architect.git"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/c9/architect/raw/master/LICENSE"
    }
  ],
  "readme": "# Architect\n\nArchitect is a simple but powerful structure for Node.js applications. Using Architect,\nyou set up a simple configuration and tell Architect which plugins you want to load. Each\nplugin registers itself with Architect, so other plugins can use its functions. Plugins can\nbe maintained as NPM packages so they can be dropped in to other Architect apps.\n\n## Plugin Interface\n\n```js\n// auth.js\n\n/* All plugins must export this public signature.\n * @options is the hash of options the user passes in when creating an instance\n * of the plugin.\n * @imports is a hash of all services this plugin consumes.\n * @register is the callback to be called when the plugin is done initializing.\n */\nmodule.exports = function setup(options, imports, register) {\n\n  // \"database\" was a service this plugin consumes\n  var db = imports.database;\n\n  register(null, {\n    // \"auth\" is a service this plugin provides\n    auth: {\n      users: function (callback) {\n        db.keys(callback);\n      },\n      authenticate: function (username, password, callback) {\n        db.get(username, function (user) {\n          if (!(user && user.password === password)) {\n            return callback();\n          }\n          callback(user);\n        });\n      }\n    }\n  });\n};\n```\n\nEach plugin is a node module complete with a package.json file.  It need not\nactually be in npm, it can be a simple folder in the code tree.\n\n```json\n{\n    \"name\": \"auth\",\n    \"version\": \"0.0.1\",\n    \"main\": \"auth.js\",\n    \"private\": true,\n    \"plugin\": {\n        \"consumes\": [\"database\"],\n        \"provides\": [\"auth\"]\n    }\n}\n```\n\n## Config Format\n\nThe `loadConfig` function below can read an architect config file.  This file can be either JSON or JS (or anything that node's require can read).\n\nThe sample calculator app has a config like this:\n\n```js\nmodule.exports = [\n  { packagePath: \"architect-http\", port: 8080 },\n  { packagePath: \"architect-http-static\", root: \"www\" },\n  \"./plugins/calculator\",\n  \"./plugins/db\",\n  \"./plugins/auth\"\n]\n```\n\nNotice that the config is a list of plugin config options.  If the only option in the config is `packagePath`, then a string can be used in place of the object.  If you want to pass other options to the plugin when it's being created, you can put arbitrary properties here.\n\nThe `plugin` section in each plugin's package.json is also merged in as a prototype to the main config.  This is where `provides` and `consumes` properties are usually set.\n\n## Architect main API\n\nThe architect module exposes two functions as it's main API.\n\n### createApp(config, [callback])\n\nThis function starts an architect config.  The return value is an `Architect` instance.  The optional callback will listen for both \"error\" and \"ready\" on the app object and report on which one happens first.\n\n### loadConfig(configPath)\n\nThis is a sync function that loads a config file and parses all the plugins into a proper config object for use with `createApp`.  While this uses sync I/O all steps along the way are memoized and I/O only occurs on the first invocation.  It's safe to call this in an event loop provided a small set of configPaths are used.\n\n## Class: Architect\n\nInherits from `EventEmitter`.\n\nThe `createApp` function returns an instance of `Architect`.\n\n### Event: \"service\" (name, service)\n\nWhen a new service is registered, this event is emitted on the app.  Name is the short name for the service, and service is the actual object with functions.\n\n### Event: \"plugin\" (plugin)\n\nWhen a plugin registers, this event is emitted.\n\n### Event: \"ready\" (app)\n\nWhen all plugins are done, the \"ready\" event is emitted.  The value is the Architect instance itself.\n\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/c9/architect/issues"
  },
  "homepage": "https://github.com/c9/architect",
  "_id": "architect@0.1.11",
  "_from": "architect@"
}
